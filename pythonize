#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Name:     pythonize
# Source:   https://github.com/princebot/pythonize
# Author:   prince@princebot.com
# Usage:    pythonize [--python-version PYTHON_VERSION] [--miniconda]
#                     [--packages PYTHON_PACKAGE [PYTHON_PACKAGE...]]
#                     [--wrapper PYTHON_PROGRAM]
# Synopsis: Download, install, and configure Python in one line.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


set -o pipefail
shopt -s extglob
declare -r PROG="pythonize"

# If the terminal believes it supports colors, use them.
COLORS_SUPPORTED=
if which tput >/dev/null; then
    if [[ -n $(tput colors) ]] && (($(tput colors) >= 8)); then
        declare -r COLORS_SUPPORTED=true
    fi
fi 2>/dev/null
if [[ -n ${COLORS_SUPPORTED} ]]; then
    # Colors
    declare -r BLACK=$(tput setaf 0)
    declare -r RED=$(tput setaf 1)
    declare -r GREEN=$(tput setaf 2)
    declare -r YELLOW=$(tput setaf 3)
    declare -r BLUE=$(tput setaf 4)
    declare -r MAGENTA=$(tput setaf 5)
    declare -r CYAN=$(tput setaf 6)
    declare -r WHITE=$(tput setaf 7)
    # Styles
    declare -r BOLD=$(tput bold)
    declare -r UL=$(tput smul)
    declare -r STOP_UL=$(tput rmul)
    declare -r CMD=$(tput setaf 7)$(tput smul)
    declare -r RESET=$(tput sgr0)
    # Cursor movement
    tput cuu1 &>/dev/null && declare -r UP_1_ROW=$(tput cuu1)
    tput cr &>/dev/null &&   declare -r TO_COL_0=$(tput cr)
    tput el &>/dev/null &&   declare -r CLR_TO_END=$(tput el)
else
    # Defensively clear these variables if colors are not supported, on the off
    # chance these have exported values.
    BLACK=
    RED=
    GREEN=
    YELLOW=
    BLUE=
    MAGENTA=
    CYAN=
    WHITE=
    BOLD=
    UL=
    STOP_UL=
    CMD=
    RESET=
    UP_1_ROW=
    TO_COL_0=
    CLR_TO_END=
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#  Functions:
#      1.  pythonize::main
#      2.  pythonize::confirm
#      3.  pythonize::create_conda_environment
#      4.  pythonize::die
#      5.  pythonize::install_anaconda
#      6.  pythonize::install_python_packages
#      7.  pythonize::run_normal_mode
#      8.  pythonize::run_wrapper_mode
#      9.  pythonize::say
#      10. pythonize::show_help
#      11. pythonize::write_shell_startup
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions:   Parse command-line arguments and install Anaconda.
# Globals:   Color-escape constants
# Arguments: Command-line args
# Functions: pythonize::die
#            pythonize::say
#            pythonize::show_help
# Returns:   None
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pythonize::main() {
    local downgrade
    local opt_mini
    local opt_wrap
    local py_vers
    local wrapper
    local -a packages
    while (($# > 0)); do
        case $1 in
            help|-h|-help|--help)
                pythonize::show_help
                ;;
            -m|--miniconda)
                opt_mini=true
                shift
                ;;
            -v|--python-version)
                # Check if specified Python version is 2.6 - 2.7 or 3.3 - 3.5
                # This will need to be changed when Anaconda increments its
                # supported versions.
                if [[ $2 =~ ^(2(\.[6-7])?|3(\.[3-5])?)$ ]]; then
                    py_vers=$2
                    if [[ ! ${py_vers} =~ ^(2(\.7)?|3(\.5)?)$ ]]; then
                        downgrade=true
                    fi
                    shift 2
                elif [[ $2 =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                    pythonize::die "Unsupported Python version \"$2\""
                else
                    pythonize::say "No argument for $1 option, skipping"
                    shift
                fi
                ;;
            -p|--package?(s))
                shift
                while (($# > 0)) && [[ -n $1 && ! $1 =~ ^--.+ ]]; do
                    packages+=($1)
                    shift
                done
                ;;
            --no-op)
                # Used for testing.
                pythonize::say -a 1 -b 1 "\nNo-op mode.\n "
                exit
                ;;
            --wrapper)
                if [[ -z $2 || $2 =~ ^--.+ ]]; then
                    pythonize::die "Missing argument for --wrapper option."
                fi
                opt_wrap=true
                wrapper=$2
                shift 2
                ;;
            *) pythonize::die "Unparsable option \"$1\"" ;;
        esac
    done
    pythonize::say -a 1 -b 1 \
        "\nStarting ${BOLD}pythonize${RESET}${GREEN} ...\n "
    local arch
    [[ $(uname -m) =~ 32 ]] && arch="x86" || arch="x86_64"
    local ana_type
    [[ ${opt_mini} ]] && ana_type="Miniconda" || ana_type="Anaconda"
    [[ ${py_vers} =~ ^3 ]] && ana_type+=3
    local ana_dir=~/$(echo -n ${ana_type} | tr A-Z a-z)
    local ana_root_type
    local ana_root_dir
    if [[ ${downgrade} ]]; then
        ana_root_type=Miniconda${ana_type##*conda}
        ana_root_dir=~/$(echo -n ${ana_root_type} | tr A-Z a-z)
    fi
    if [[ ${opt_wrap} ]]; then
        pythonize::run_wrapper_mode
    else
        pythonize::run_normal_mode
    fi
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions:   Get a yes or no from the user.
# Globals:   None.
# Arguments: None.
# Functions: pythonize::say
# Returns:   0 (yes) or 1 (no)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pythonize::confirm() {
    local resp
    local retval=0
    [[ ${opt_noninteractive} ]] && return ${retval}
    while read -r resp; do
        [[ ${resp} =~ ^(y|yes|n|no)$ ]] && break
        pythonize::say -b 1 "Please enter 'y' or 'n'"
    done
    [[ ${resp} =~ ^n ]] && retval=1
    return ${retval}
}


pythonize::create_conda_environment() {
    if [[ -z $1 ]]; then
        pythonize::die "Internal Error: No argument for ${FUNCNAME}"
    fi
    local c_env=$1
    local e=$(conda env list \
             | awk '$2 ~ /\*/ && $3 ~ /'"${c_env}"'/ {printf $3}')
    if [[ ${e} ]]; then
        source deactivate
        source "${e%/envs*}/bin/activate" root
        conda remove -y --all -n "${c_env}"
    fi
    if [[ ${opt_mini} ]]; then
        conda create -y -n "${c_env}" python=${py_vers}
    else
        conda create -y -n "${c_env}" python=${py_vers} anaconda
    fi
    if ! source activate "${c_env}"; then
        pythonize::die "Unable to access ${c_env} conda environment"
    fi
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions:   Print formatted error messages and quit with exit code 1.
# Globals:   Color-escape constants.
# Arguments: Message string.
# Returns:   1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pythonize::die() {
    # Rather than add external dependencies, we try to prettyprint messages
    # using shell utilties common to both BSD- and GNU-flavored *nix. We first
    # calculate the size of the columns we need; then, we shove everything
    # through echo+fold+paste to align it all while keeping the lines lengths
    # to under 79 characters.
    local header=" >   ${BOLD}${PROG}: Error:${RESET}${RED}"
    local char_ct=$(wc -m <(echo -n "${header}") | awk '{printf $1}')
    local inv_char_ct=$(wc -m <(echo -n "${BOLD}${RESET}${RED}") \
                        | awk '{printf $1}')
    char_ct=$((char_ct - inv_char_ct))
    local tab_ct
    if (( (char_ct % 7) == 0 || char_ct <= 15 )); then
        tab_ct=$(( (char_ct / 7) - 1 ))
    else
        tab_ct=$((char_ct / 7))
    fi
    local filler="${RESET}${RED} >"
    local i
    filler+=$'\t'
    for ((i=1; i < tab_ct && tab_ct > 0; i++)); do
        filler+=$'\t'
    done
    local line_ct
    line_ct=$(wc -l <(fold -s -w 48 <(echo -en "$@")) | awk '{printf $1}')
    header+=$'\n'
    for ((i=0; i < line_ct && line_ct >= 0; i++)); do
        header+=${filler}$'\n'
    done
    header=${header%$'\n'}
    local msg=$(paste <(echo -n "${header}") \
                      <(fold -s -w 48 <(echo -en "$@")))
    echo -e "\n${RED}${msg}${RESET}\n " >&2
    exit 1
}


pythonize::install_anaconda() {
    local exe=downloaded_installer.sh
    local get_url
    local get_exe
    if which curl &>/dev/null; then
        get_url="curl -s"
        get_exe="curl -o ${exe}"
    elif which wget &>/dev/null; then
        get_url="wget --silent -O -"
        get_exe="wget --silent --show-progress -O ${exe}"
    else
        pythonize::die "Unable to find curl or wget to download ${ana_type}"
    fi
    local sys
    [[ $(uname -s) =~ [Dd]arwin ]] && sys=MacOSX || sys=Linux
    local url
    trap "rm -f -- \"${exe}\"; trap - EXIT" EXIT
    local __ana_dir
    local __ana_type
    if [[ ${downgrade} ]]; then
        __ana_dir=${ana_root_dir}
        __ana_type=${ana_root_type}
    else
        __ana_dir=${ana_dir}
        __ana_type=${ana_type}
    fi
    if [[ ${opt_mini} || ${downgrade} ]]; then
        url=$(${get_url} http://conda.pydata.org/miniconda.html \
              | grep -Eio "https?://.*${__ana_type}.*${sys}.*${arch}\.sh" \
              | head -1)
    else
        url=$(${get_url} http://continuum.io/downloads \
              | grep -Eio "https?://.*${__ana_type}.*${sys}.*${arch}\.sh" \
              | head -1)
    fi
    if ! ${get_exe} "${url}"; then
        pythonize::die "Failed to download ${__ana_type} installer"
    fi
    pythonize::say -a 1 -b 1 "\nLaunching ${ana_type} installer.\n "
    chmod +x "${exe}"
    ./${exe} -b
    export PATH="${__ana_dir}/bin:${PATH}"
    if [[ ${downgrade} ]]; then
        pythonize::create_conda_environment "python${py_vers}"
    fi
    if ! which conda &>/dev/null; then
        pythonize::die "Unable to find conda after installation."
    fi
}


pythonize::install_python_packages() {
    local -a missing
    local p
    for p in "${packages[@]}"; do
        conda install -y "$p" && continue
        pythonize::say -a 1 -b 1 \
            "\nAnaconda does not appear to have Python package \"$p\"" \
            "in its default repositories --- trying pip instead.\n "
        yes y | pip install "$p"
        (($?)) || continue
        # Pip's error status can't be trusted: When it encounters an exception
        # trying to install a package, it will sometimes find an alternate way
        # to install it --- but still return a nonzero status. So let's double
        # check existence of packages before before we report failure.
        python -c "import ${p}" &>/dev/null && continue
        if [[ ${opt_wrap} ]]; then
            pythonize::die "Unable to install required Python package" \
                           "\"${p}\" using conda or pip."
        fi
        pythonize::say -a 1 -b 1 \
            "\nUnable to install Python package \"${p}\" using" \
            "conda or pip. Continuing without it.\n "
        missing+=($p)
    done
    if [[ ! ${opt_mini} ]]; then
        pythonize::say -a 1 -b 1 \
            "\nUpdating 100+ Python packages --- this will take some time.\n" \
            "\nTo reduce installation runtime as well as disk utilization," \
            "in the future you can install ${BOLD}miniconda${RESET}${GREEN}" \
            "instead. Miniconda contains only Python and the conda package" \
            "manager; you can then use conda to install just the packages" \
            "you currently need.\n "
    fi
    if [[ ${downgrade} ]]; then
        conda install -y python=${py_vers}
        conda update -y "${packages[@]}"
    else
        conda update -y --all
    fi
    [[ ${opt_mini} ]] || conda install -y anaconda-client
    pythonize::say -b 2 "\nAnaconda Python has been downloaded and configured."
    if ((${#missing[@]})); then
        pythonize::say "The following Python packages could not be installed" \
                       "using either conda or pip: ${missing[@]}"
    fi
}


pythonize::run_normal_mode() {
    local d
    if which conda &>/dev/null; then
        d=$(which conda | awk -F '\/envs|\/bin' '{print $1}' 2>/dev/null)
    elif [[ -d ${ana_dir} ]]; then
        d=${ana_dir}
    fi
    if [[ $d ]]; then
        pythonize::say -n "Anaconda Python appears to already be installed" \
                          "in ${d}. If you choose to continue, ${PROG} will" \
                          "remove this directory along with any conda" \
                          "environments and settings within." \
                          "\n\nContinue? (y/n) "
        if ! pythonize::confirm; then
            pythonize::say -a 1 -b 1 "\nAborting at user request\n "
            return
        fi
        if ! rm -rf -- "${d}"; then
            pythonize::die "Unable to remove ${d}"
        fi
        echo
    fi
    pythonize::install_anaconda
    pythonize::write_shell_startup
    pythonize::install_python_packages
    pythonize::say -a 1 \
        "Start a fresh shell session to begin using your new Python" \
        "installation, or run this command:" \
        "\n\n\t${BOLD}${WHITE}source ~/.pythonize.startup\n "
}


pythonize::run_wrapper_mode() {
    local c_env
    local d
    if ! which conda &>/dev/null; then
        for d in ~/{ana,mini}conda{,3}/bin; do
            [[ -d $d ]] || continue
            source "${d}/activate" 2>/dev/null && break
        done
    fi
    if which conda &>/dev/null; then
        pythonize::create_conda_environment "pythonized_${wrapper}"
        pythonize::install_python_packages
        return
    fi
    [[ -d ${ana_dir} ]] && rm -rf -- "${an_dir}"
    pythonize::install_anaconda
    pythonize::install_python_packages
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions:   Print formatted general messages.
# Globals:   Color-escape constants.
# Arguments: Message string.
# Options:   -a N   Print N trailing newlines.
#            -b N   Print N leading newlines.
#            -n     End without a newline --- next text will be on same line.
# Returns:   None.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pythonize::say() {
    local i
    local nl_after
    local nl_before
    local no_final_nl
    while (($# > 0)); do
        case $1 in
            -n)
                no_final_nl=true
                shift
                ;;
            -@(a|b))
                [[ $2 =~ ^[0-9]+$ ]] || continue
                for ((i=0; i < $2 && $2 >= 0; i++)); do
                    case $1 in
                        -a) nl_after+=$'\n'  ;;
                        -b) nl_before+=$'\n' ;;
                    esac
                done
                shift 2
                ;;
            *) break ;;
        esac
    done
    # The comments at the top of pythonize::die() apply here as well.
    local msg=$(fold -s -w 72 <(echo -e "$@"))
    local line_ct=$(wc -l <(echo "${msg}") | awk '{print $1}')
    local filler
    for ((i=0; i < line_ct && line_ct >= 0; i++)); do
        filler+="${RESET}${WHITE} >  ${GREEN}\n"
    done
    filler=${filler%\\n}
    msg=$(paste -d ' ' <(echo -e "${filler}") <(echo "${msg}"))
    if [[ ${no_final_nl} ]]; then
        echo -n "${nl_before}${msg}${RESET}"
    else
        echo "${nl_before}${msg}${nl_after}${RESET}"
    fi
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions:   Display man page.
# Globals:   INLINE_MAN_PAGE
# Arguments: None
# Returns:   None
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pythonize::show_help() {
    mkdir -p ~/tmp
    local manpage=~/tmp/pythonize.manpage.1
    cat <<<"${INLINE_MAN_PAGE}" > "${manpage}"
    if [[ ! -f ${manpage} ]]; then
        pythonize::die "Unable to find man page at ${manpage}"
    fi
    exec man "${manpage}"
}


pythonize::write_shell_startup() {
    local line=$(echo -e \
        "\n# Added by pythonize" \
        "\n[[ -f ~/.pythonize.startup ]] && source ~/.pythonize.startup\n ")
    local startup=~/.pythonize.startup
    local path=$(dirname "$(which conda)")
    sed 's,__REPLACE__,'"${path}"',g' <(echo "${STARTUP}") > "${startup}"
    for f in ~/.bash_profile ~/.bashrc ~/.bash_profile ~/.bash_login \
             ~/.profile
    do
        if [[ -w $f ]]; then
            grep -Fq "Added by pythonize" "$f" && break
            echo -n "${line}" >> "$f" && break
        fi
    done
}



# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Man page.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

INLINE_MAN_PAGE=$(cat <<EOF_MAN_PAGE
.\"
.\" MAN PAGE COMMENTS to
.\"
.\" Prince Williams
.\" prince@princebot.com
.\" https://github.com/princebot/pythonize
.\"
.\" Last Change: Sun Sep 20
.\"
.mso www.tmac
.TH PYTHONIZE 1 "2015-09-20" "github.com/princebot/pythonize" \
    "User Commands"
.SH NAME
pythonize \- download, install, and configure Python in one line
.SH SYNOPSIS
.ad l
.nh
.TP 10
.B pythonize
.RB [ --python-version
.IR VERSION ]
.RB [ --miniconda ]
.br
.RB [ --packages
.IR PACKAGE " [" PACKAGE ...]]
.SH DESCRIPTION
.ad n
.hy 14
.B pythonize
wraps the installation process for the
.B Anaconda Python distribution
and its environment/package manager
.BR conda ,
providing you in a single command line with a ready-to-use Python preloaded
with any needed packages.
.P
When run without options,
.B pythonize
performs these default actions:
.sp
.RS
.PD 0
.TP 3
\[->]
downloads latest Anaconda Python for current machine\[cq]s architecture,
.TP
\[->]
installs it noninteractively using Anaconda defaults,
.TP
\[->]
invokes conda to update all Python packages, and
.TP
\[->]
adds
.IR ~/anaconda/bin " or " ~/miniconda/bin
to your PATH.
.RE
.PD
.P
Anaconda Python comes bundled with 100+ useful Python packages. For a leaner
installation (10x smaller) including only the conda
utility and Python,
.B pythonize
supports installing
.B miniconda
rather than Anaconda using the
.B --miniconda
option (see
.B OPTIONS
below).
.SH OPTIONS
.TP 7
.BR -h ", " --help
Display this man page.
.TP
.BR -m ", " --miniconda
Download and install lightweight
.B Miniconda
(10x smaller) rather than Anaconda. Miniconda includes only conda and Python,
leaving installation of other packages via conda up to you.
.TP
.BR -p ", " --packages " [" \fIPACKAGE " [" \fIPACKAGE ...]]
Install these Python packages in addition to the defaults,
e.g.,
.RS +11
.P
.B pythonize --packages requests boto3
.RE
.TP
.BR -v ", " --python-version " \fIVERSION"
Use this Python instead of 2.7 for the default environment.
.SH FILES
~/.bash_profile
.br
~/.bashrc
.br
~/.bash_login
.PD 0
.TP
~/.profile
.B pythonize
adds
.IR ~/anaconda/bin " or " ~/miniconda/bin
to PATH in the first writable file on this list.
.PD
.P
~/.anaconda
.PD 0
.TP
~/.miniconda
Installation directory for Anaconda or Miniconda.
.PD
.SH EXAMPLES
Default installation without options:
.P
.RS +4
.B pythonize
.RE
.P
Install latest version of Python 3:
.P
.RS +4
.B pythonize --python-version 3
.RE
.P
Install a specific Python 3 release, and add the requests and boto3 libraries into the default environment post-installation.
.P
.RS +4
.B pythonize --python-version 3.5 --packages requests boto3
.RE
.SH SEE ALSO
.PD 0
.TP 18
.B conda
.URL http://conda.pydata.org/docs
.TP
.B Anaconda Python
.URL https://store.continuum.io/cshop/anaconda
.TP
.B pythonize
.URL http://github.com/princebot/pythonize
.PD
EOF_MAN_PAGE
)


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pythonize shell startup
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

declare -r STARTUP=$(cat <<'EOF_PYTHONIZE_STARTUP'
#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Name:     pythonize.startup
# Source:   https://github.com/princebot/pythonize
# Author:   prince@princebot.com
# Synopsis: Sourced at beginning of shell session to load Anaconda Python.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# pythonize appends a line sourcing this to the end of an existing shell
# startup script, e.g., ~/.bash_profile.

if [[ -d _REPLACE_ ]]; then
    __dir="__REPLACE__"
    if [[ ! ${PATH} =~ (^|:)"${__dir}"($|:) ]]; then
        PATH="${__dir}:${PATH}"
    fi
    export PATH
    if [[ ${__dir} =~ .*(ana|mini)conda/envs ]]; then
        __env=$(echo -n "${__dir}" | awk -F '/' '{printf $(NF - 1)}')
        conda config --set changeps1 false
        source activate "${__env}"
        conda config --set changeps1 true
    fi
fi 2>/dev/null

unset -v __dir
unset -v __env
 
EOF_PYTHONIZE_STARTUP
)


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Begin execution.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

pythonize::main "$@"
